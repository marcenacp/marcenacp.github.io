<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pierre Marcenac</title><link>https://marcenacp.github.io/</link><description>Recent content on Pierre Marcenac</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Â© Pierre Marcenac | 2022</copyright><lastBuildDate>Wed, 23 Feb 2022 10:52:59 +0800</lastBuildDate><atom:link href="https://marcenacp.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Bias and Variance in Software Development</title><link>https://marcenacp.github.io/bias-and-variance-in-devops/</link><pubDate>Wed, 23 Feb 2022 10:52:59 +0800</pubDate><guid>https://marcenacp.github.io/bias-and-variance-in-devops/</guid><description>The bias-variance tradeoff is a well-known tradeoff in machine learning. It states you must find the balance between a biased artificial intelligence (AI) and a very unstable AI. You cannot achieve both simultaneously. I will draw in this post a similar parallel in product development in regards to DevOps.
Let&amp;rsquo;s first recap dev&amp;rsquo;s and ops&amp;rsquo; respective main objectives.
Ops (aka operations)
Performance means maintaining a blazing-fast and reliable product.</description></item><item><title>Commutability in TypeScript</title><link>https://marcenacp.github.io/commutability-in-typescript/</link><pubDate>Wed, 23 Feb 2022 10:52:59 +0800</pubDate><guid>https://marcenacp.github.io/commutability-in-typescript/</guid><description>x === 'x' versus 'x' === x. The equality in TypeScript is computationnally not commutable.
The experiment I imagined the following experiment:
I generate 99,999,999 random letters from the lower-case alphabet. I time the evaluation of both expressions (x === 'x' and 'x' === x) on those letters. The TypeScript code is:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 const NUMBER_OF_REPETITION = 99999999; const ALPHABET = &amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;; const RANDOM_SEQUENCE = Array(NUMBER_OF_REPETITION) .</description></item><item><title>Database Indexes Explained to Software Developers</title><link>https://marcenacp.github.io/indexing-in-database/</link><pubDate>Thu, 04 Feb 2021 10:52:59 +0800</pubDate><guid>https://marcenacp.github.io/indexing-in-database/</guid><description>&amp;ldquo;You&amp;rsquo;d better index your database!&amp;rdquo;
As a software engineer, you&amp;rsquo;ve probably heard this sentence a few times. This blog post will guide you through understanding how indexing works.
The code in this blog post executes by order of appearance. So I encourage you to follow along by copy/pasting it in a notebook. I used Python 3.9. You&amp;rsquo;ll need the following dependencies: pip install bplustree faker numpy tqdm.
A minimal database in Python First, we will need a minimal database in Python.</description></item><item><title>5 Mistakes I Made When Doing Custom Data Visualization With D3.js</title><link>https://marcenacp.github.io/mistakes-d3js/</link><pubDate>Wed, 01 Aug 2018 10:52:59 +0800</pubDate><guid>https://marcenacp.github.io/mistakes-d3js/</guid><description/></item><item><title>Serverless Applications with AWS and Travis</title><link>https://marcenacp.github.io/serverless-with-aws-and-travis/</link><pubDate>Tue, 01 Aug 2017 10:52:59 +0800</pubDate><guid>https://marcenacp.github.io/serverless-with-aws-and-travis/</guid><description/></item></channel></rss>